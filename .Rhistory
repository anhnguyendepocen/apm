main = "Rolling 1 Year % Returns")
table.AnnualizedReturns(p_merged)
table.AnnualizedReturns(p_merged)
table.Drawdowns(p_xly)
table.Drawdowns(p_xly$returns)
table.Drawdowns(p_ivv$returns)
qqnorm(p_xly$returns)
qqnorm(p_ivv$returns)
table.AnnualizedReturns(p_xly$returns)
table.AnnualizedReturns(p_merged)
VINIX <- get.hist.quote(instrument="get.hist.quote(instrument="ivv", start="2003-12-31", quote="AdjClose", compression="d")", start="2003-12-31", quote="AdjClose", compression="d")
VINIX <- get.hist.quote(instrument="VINIX", start="2003-12-31", quote="AdjClose", compression="d")
head(VINIX)
?portfolio.optim
VINIX <- get.hist.quote(instrument="VINIX", start="2010-12-31", quote="AdjClose", compression="d")
VIEIX <- get.hist.quote(instrument="VIEIX", start="2010-12-31", quote="AdjClose", compression="d")
VBTIX <- get.hist.quote(instrument="VBTIX", start="2010-12-31", quote="AdjClose", compression="d")
VTSNX <- get.hist.quote(instrument="VTSNX", start="2010-12-31", quote="AdjClose", compression="d")
portfolio_prices <- as.xts(merge(VINIX,VIEIX,VBTIX,VTSNX))
portfolio_returns <- na.omit(ROC(portfolio_prices))
portfolio.optim(portfolio_returns)$pw
head(portfolio_returns)
head(portfolio_returns[2013])
head(portfolio_returns["2013"])
portfolio.optim(portfolio_returns["2010"])$pw
portfolio.optim(portfolio_returns["2011"])$pw
portfolio.optim(portfolio_returns["2011"])$pw * 100
VINIX <- get.hist.quote(instrument="VINIX", start="2000-12-31", quote="AdjClose", compression="d")
VIEIX <- get.hist.quote(instrument="VIEIX", start="2000-12-31", quote="AdjClose", compression="d")
VBTIX <- get.hist.quote(instrument="VBTIX", start="2000-12-31", quote="AdjClose", compression="d")
VTSNX <- get.hist.quote(instrument="VTSNX", start="2000-12-31", quote="AdjClose", compression="d")
portfolio_returns["2011"][1:3]
portfolio_returns["2011"][,1:3]
head(portfolio_returns["2011"][,1:3])
portfolio_prices <- as.xts(merge(VINIX,VIEIX))
portfolio_returns <- na.omit(ROC(portfolio_prices))
portfolio.optim(portfolio_returns)$pw * 100
res <- portfolio.optim(portfolio_returns)
res$pw
portfolio_prices <- as.xts(merge(VINIX,VBTIX))
portfolio_returns <- na.omit(ROC(portfolio_prices))
res <- portfolio.optim(portfolio_returns)
res$pw
portfolio_prices <- as.xts(merge(VINIX,VBTIX,VBTIX,VTSNX))
portfolio_returns <- na.omit(ROC(portfolio_prices))
res <- portfolio.optim(portfolio_returns)
res$pw
head(portfolio_prices)
VINIX <- get.hist.quote(instrument="VINIX", start="2010-12-31", quote="AdjClose", compression="d")
# Vanguard small-mid cap domestic
VIEIX <- get.hist.quote(instrument="VIEIX", start="2010-12-31", quote="AdjClose", compression="d")
# Vanguard Total Bond Market Index
VBTIX <- get.hist.quote(instrument="VBTIX", start="2010-12-31", quote="AdjClose", compression="d")
# Vanguard Total Intenational Stock
VTSNX <- get.hist.quote(instrument="VTSNX", start="2010-12-31", quote="AdjClose", compression="d")
portfolio_prices <- as.xts(merge(VINIX,VBTIX,VBTIX,VTSNX))
portfolio_returns <- na.omit(ROC(portfolio_prices))
res <- portfolio.optim(portfolio_returns)
head(portfolio_prices)
head(portfolio_returns)
res <- portfolio.optim(portfolio_returns)
portfolio_prices <- as.xts(merge(VINIX,VIEIX,VBTIX,VTSNX))
portfolio_returns <- na.omit(ROC(portfolio_prices))
res <- portfolio.optim(portfolio_returns)
res$pw
res <- portfolio.optim(portfolio_returns, pm=0.1)
res <- portfolio.optim(portfolio_returns, pm=0.08)
res <- portfolio.optim(portfolio_returns, pm=0.08/252)
res$pw
res <- portfolio.optim(portfolio_returns, pm=0.1/252)
res$pw
res <- portfolio.optim(portfolio_returns, pm=0.12/252)
res$pw
res$pw * 100
res <- portfolio.optim(portfolio_returns, pm=0.10/252)
res$pw * 100
res <- portfolio.optim(portfolio_returns, pm=0.08/252)
res$pw * 100
portfolio_prices <- as.xts(merge(VINIX,VIEIX))
portfolio_returns <- na.omit(ROC(portfolio_prices))
res <- portfolio.optim(portfolio_returns, pm=0.08/252)
res <- portfolio.optim(portfolio_returns)
res$pw * 100
res <- portfolio.optim(portfolio_returns, pm=0.1/252)
res <- portfolio.optim(portfolio_returns, pm=0.05/252)
res <- portfolio.optim(portfolio_returns, pm=0.04/252)
res <- portfolio.optim(portfolio_returns, pm=0.1/252)
res <- portfolio.optim(portfolio_returns, pm=0.06/252)
res <- portfolio.optim(portfolio_returns, pm=0.02/252)
res <- portfolio.optim(portfolio_returns)
res$pw
res$px
res$pm
res$ps
res <- portfolio.optim(portfolio_returns, pm=0.0005)
portfolio_prices <- as.xts(merge(VINIX, VIEIX, VBTIX, VTSNX))
portfolio_returns <- na.omit(ROC(portfolio_prices))
res <- portfolio.optim(portfolio_returns)
res$pw
res$pm
res <- portfolio.optim(portfolio_returns, pm=0.1/252)
res$pw
res <- portfolio.optim(portfolio_returns, pm=0.12/252)
res$pw
res <- portfolio.optim(portfolio_returns, pm=0.08/252)
res$pw
res <- portfolio.optim(portfolio_returns, pm=0.10/252)
res$pw
library(quantmod)
SPY <- getSymbols("SPY", auto.assign=FALSE)
prices <- Ad(SPY)
mean_prices <- round(mean(prices), 2)
sd_prices <- round(sd(prices), 2)
hist(prices, breaks=100, prob=T, cex.main=0.9)
abline(v=mean_prices, lwd=2)
legend("topright", cex=0.8, border=NULL, bty="n",
paste0("mean=", mean_prices, "; sd=", sd_prices))
returns <- diff(log(prices))
par(mfrow = c(2, 2))
hist(returns["2008"], breaks=100)
hist(returns["2009"], breaks=100)
hist(returns["2010"], breaks=100)
hist(returns["2011"], breaks=100)
sd(returns["2008"])
sd(returns["2010"])
sd(returns["2012"])
sd(returns["2014"])
par(mfrow = c(1, 1))
spy <- Ad(SPY)
library(urca)
test <-ur.kpss(as.numeric(spy))
str(test)
spy <- Ad(SPY)
library(urca)
mu <- mean(returns, na.rm=TRUE)
sigma <- sd(returns, na.rm=TRUE)
x <- seq(-5*sigma, 5*sigma, length=nrow(returns))  # x axis is 5 std dev
hist(returns, breaks=100,
main = "Histogram of returns for SPY",
cex.main = 0.8, prob=TRUE)
lines(x, dnorm(x, mu, sigma), col="red", lwd=2)
VXX <- getSymbols("VXX", auto.assign=FALSE)
cor(Cl(SPY)["2009-01-30/"], Cl(VXX))
plot(diff(log(Cl(VXX))))
cor(Ad(SPY)["2009-01-30/"], Ad(VXX))
plot(as.numeric(diff(log(Ad(SPY)["2009-01-30/"]))[-1]),
as.numeric(diff(log(Ad(VXX)))[-1]))
sv <- as.xts(merge(diff(log(Ad(SPY)["2009-01-30/"]))[-1],
diff(log(Cl(SPY)["2009-01-30/"]))[-1],
diff(log(Ad(VXX)))[-1],
diff(log(Cl(VXX)))[-1]))
head(sv)
reg <- lm(VXX.Adjusted ~ SPY.Adjusted, data=sv)
summary(reg)
par(mfrow = c(2, 2))
plot(reg$residuals,
main = "Residuals through time",
xlab = "Days", ylab = "Residuals")
hist(reg$residuals, breaks=100,
main = "Distribution of residuals",
xlab = "Residuals")
qqnorm(reg$residuals)
qqline(reg$residuals)
acf(reg$residuals, main="Autocorrelation")
vxx_lag_1 <- lag(Cl(VXX), k=1)
sv <- merge(sv, lag(sv))
plot(as.numeric(sv$SPY.Adjusted.1), as.numeric(sv$VXX.Adjusted),
main = "Scatter plot SPY lagged vs. VXX",
cex.main = 0.8,
cex.axis = 0.8,
cex.lab = 0.8)
grid()  # no discernible relationship
reg2 <- lm(VXX.Close ~ SPY.Close.1, data=sv)
summary(reg2)
ccf(as.numeric(sv$SPY.Adjusted), as.numeric(sv$VXX.Adjusted),
main = "Cross correlation between SPY and VXX")
z <- rnorm(1000)
par(mfrow=c(2,1))  # corr does not exist with iid var
acf(z); grid(); acf(z^2); grid()
par(mfrow=c(1,1))  # corr does exist with real returns
acf(sv$SPY.Adjusted ^ 2); grid()
par(mfrow=c(1,2))  # corr exists with other fns too
acf(sv$SPY.Adjusted ^ 3)
acf(abs(sv$SPY.Adjusted))
rm(list=ls())
install.packages("twitteR")
consumer_key <- "	0cqk2Wu5mtmLJymPnwYi44v4o"
consumer_secret <- "uCdAT0kuZATBnKXAk8MW2BknIFFcTgl2iW3mrQx35En3CvmXww"
access_token <- "14456397-V0ADcYqp2bWBXoDpohCMEcvFVamP0GBeKhKeagmRg"
access_secret <- "YcC0EKv9nUu5l6OFeolGQcoDCQ5Pbyk44hX1D0NXGcahd"
library(twitteR)
origop <- options("httr_oauth_cache")
options(httr_oauth_cache = TRUE)
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
consumer_key <- "0cqk2Wu5mtmLJymPnwYi44v4o"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
options(httr_oauth_cache = origop)
stock_tweets <- searchTwitter("AAPL")
stock_tweets <- twListToDF(stock_tweets)
stock_tweets <- searchTwitter("AAPL") %>% twListToDF()
library(tidyverse)
stock_tweets <- searchTwitter("AAPL") %>% twListToDF()
head(stock_tweets)
head(stock_tweets)
library(tidytext)
install.packages("tidytext")
library(tidytext)
install.packages("quantstrat")
install.packages("quantstrat", repos="http://R-Forge.R-project.org")
install.packages("quantstrat", repos="http://R-Forge.R-project.org")
library(quantstrat)
install.packages("C:\\Users\\pistachio\\Downloads\\quantstrat_0.9.1739.zip", repos=NULL, type="source")
install.packages("C:\\Users\\pistachio\\Downloads\\blotter_0.9.1741.zip", repos=NULL, type="source")
library(quantstrat)
library(blotter)
library(quantstrat)
library(blotter)
rm(list=ls(.blotter), envir=.blotter)
currency("USD")
Sys.setenv(TZ="UTC")
symbols <- c("XLB", #SPDR Materials sector
"XLE", #SPDR Energy sector
"XLF", #SPDR Financial sector
"XLP", #SPDR Consumer staples sector
"XLI", #SPDR Industrial sector
"XLU", #SPDR Utilities sector
"XLV", #SPDR Healthcare sector
"XLK", #SPDR Tech sector
"XLY", #SPDR Consumer discretionary sector
"RWR", #SPDR Dow Jones REIT ETF
"EWJ", #iShares Japan
"EWG", #iShares Germany
"EWU", #iShares UK
"EWC", #iShares Canada
"EWY", #iShares South Korea
"EWA", #iShares Australia
"EWH", #iShares Hong Kong
"EWS", #iShares Singapore
"IYZ", #iShares U.S. Telecom
"EZU", #iShares MSCI EMU ETF
"IYR", #iShares U.S. Real Estate
"EWT", #iShares Taiwan
"EWZ", #iShares Brazil
"EFA", #iShares EAFE
"IGE", #iShares North American Natural Resources
"EPP", #iShares Pacific Ex Japan
"LQD", #iShares Investment Grade Corporate Bonds
"SHY", #iShares 1-3 year TBonds
"IEF", #iShares 3-7 year TBonds
"TLT" #iShares 20+ year Bonds
)
require(quantstrat)
require(PerformanceAnalytics)
initDate <- "1990-01-01"
from <- "2003-01-01"
to <- "2013-12-31"
options(width = 70)
if(!"XLB" %in% ls()) {
suppressMessages(getSymbols(symbols,
from=from, to=to,
src="yahoo", adjust=TRUE))
}
install.packages(c("jsonlite", "tibble", "tseries"))
install.packages("testthat")
plot(cars)
library(mailR)
taskscheduleR:::taskschedulerAddin()
install.packages(c("backports", "broom", "curl", "data.table", "dendextend", "devtools", "digest", "FinancialInstrument", "foreach", "fpc", "git2r", "glue", "hexbin", "hms", "hunspell", "iterators", "knitr", "lazyeval", "lubridate", "mclust", "openssl", "padr", "quantmod", "R.utils", "Rcpp", "RcppArmadillo", "RCurl", "registry", "reshape2", "rlang", "rmarkdown", "robustbase", "rprojroot", "stringi", "taskscheduleR", "testthat", "tibble", "tidyselect", "tidytext", "tidyverse", "timeDate", "timeSeries", "viridis", "withr", "xts", "yaml", "zoo"))
install.packages(c("callr", "digest", "knitr", "lubridate", "mvtnorm", "openssl", "seriation", "tidyr", "viridis", "viridisLite", "xml2"))
library(quantmod)
library(tidyverse)
library(magrittr)
library(quantmod)
library(rvest)
library(tidyverse)
library(stringr)
library(lubridate)
setwd("C:\\Users\\pistachio\\Projects\\stock-analysis\\P001-large-changes-2")
library(magrittr)
library(quantmod)
library(rvest)
library(tidyverse)
library(stringr)
library(lubridate)
library(magrittr)
library(tidyquant)
install.packages(c("BH", "callr", "dendextend", "tseries"))
tq_index_options()
tq_index("SP500")
tq_exchange_options()
tq_get_options()
tq_index("SP500")  # company list from marketvolume.com
date_end <- Sys.Date()
date_end
date_start <- "2010-01-01"
tq_transmute_fun_options() %>% str()
?ClCl
stock_prices <- c("MA", "V", "PYPL") %>%
tq_get(get = "stock.prices",
from = "2015-01-01",
to = "2016-12-31") %>%
group_by(symbol)
stock_prices
stock_pairs <- stock_prices %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "daily",
type = "log",
col_rename = "returns") %>%
spread(key = symbol, value = returns)
stock_pairs
stock_prices
stock_prices %>% filter(symbol == "PYPL")
stock_pairs
stock_prices
log(85.3) - log(86.7)
log(85.3-86.7)
log(86.7/85.3)
stock_pairs %>%
ggplot(aes(x = V, y = MA)) +
geom_point(color = palette_light()[[1]], alpha = 0.5) +
geom_smooth(method = "lm") +
labs(title = 'Visualizing returns relationship of Visa and Mastercard') +
theme_tq()
lm(MA ~ V, data = stock_pairs) %>% summary
stock_prices <- c("MA", "V", "PYPL") %>%
tq_get(get = "stock.prices",
from = "2015-01-01",
to = "2016-12-31")
tq_index("SP500")  # company list from marketvolume.com
stock_list <- tq_index("SP500")  # company list from marketvolume.com
stock_prices <- stock_list %>%
tq_get(get = "stock.prices",
from = "2015-01-01",
to = "2016-12-31")
stock_prices
install.packages(c("choroplethr", "choroplethrMaps", "data.table",
"datasets", "devtools", "dlnm", "dplyr", "faraway", "forcats",
"GGally", "ggmap", "ggplot2", "ggthemes", "ghit", "GISTools",
"grid", "gridExtra", "httr", "knitr", "leaflet", "lubridate",
"magrittr", "methods", "microbenchmark", "package", "pander",
"plotly", "profvis", "pryr", "purrr", "rappdirs", "raster",
"RColorBrewer", "readr", "rmarkdown", "scales", "sp", "stats",
"stringr", "testthat", "tidyr", "tidyverse", "tigris", "titanic",
"viridis"))
install.packages(c("choroplethr", "choroplethrMaps", "data.table", "datasets", "devtools", "dlnm", "dplyr", "faraway", "forcats", "GGally", "ggmap", "ggplot2", "ggthemes", "ghit", "GISTools", "grid", "gridExtra", "httr", "knitr", "leaflet", "lubridate", "magrittr", "methods", "microbenchmark", "package", "pander", "plotly", "profvis", "pryr", "purrr", "rappdirs", "raster", "RColorBrewer", "readr", "rmarkdown", "scales", "sp", "stats", "stringr", "testthat", "tidyr", "tidyverse", "tigris", "titanic", "viridis"))
install.packages(c("choroplethr", "choroplethrMaps", "data.table", "datasets", "devtools", "dlnm", "dplyr", "faraway", "forcats", "GGally", "ggmap", "ggplot2", "ggthemes", "ghit", "GISTools", "grid", "gridExtra", "httr", "knitr", "leaflet", "lubridate", "magrittr", "methods", "microbenchmark", "package", "pander", "plotly", "profvis", "pryr", "purrr", "rappdirs", "raster", "RColorBrewer", "readr", "rmarkdown", "scales", "sp", "stats", "stringr", "testthat", "tidyr", "tidyverse", "tigris", "titanic", "viridis"))
install.packages(c("bookdown", "dbplyr", "rlang", "tidyquant", "tidytext", "timeDate"))
vector("numeric", length = 10)
class(0:6)
as.numeric(0:6)
classs(as.numeric(0:6))
class(as.numeric(0:6))
class(as.logical(0:6))  # coerce class
as.logical(0:6)  # coerce class
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
attribute(m)
attributes(m)
matrix(1:6, nrow = 2)
dim(1:10) <- c(2,5)
x
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
unclass(x)
factor(c("yes", "yes", "no", "yes", "no"), levels = c("yes", "no"))
x <- c(1, 2, NaN, NA, 4)
is.na(x)
is.nan(x)
VADeaths
# transforming data into tidy data
require(tidyr)
require(dplyr)
VADeaths
VADeaths %>% tbl_df()
VADeaths %>%
tbl_df() %>%
mutate(age = row.names(VADeaths)) %>%
gather(key, death_rate, -age) %>%
separate(key, c("urban", "gender"), sep = " ") %>%
mutate(age = factor(age), urban = factor(urban), gender = factor(gender))
VADeaths
VADeaths_tidy <- VADeaths %>%
tbl_df() %>%
mutate(age = row.names(VADeaths)) %>%
gather(key, death_rate, -age) %>%
separate(key, c("urban", "gender"), sep = " ") %>%
mutate(age = factor(age), urban = factor(urban), gender = factor(gender))
# transforming data into tidy data
require(tidyr)
require(dplyr)
VADeaths_tidy <- VADeaths %>%
tbl_df() %>%
mutate(age = row.names(VADeaths)) %>%
gather(key, death_rate, -age) %>%
separate(key, c("urban", "gender"), sep = " ") %>%
mutate(age = factor(age), urban = factor(urban), gender = factor(gender))
VADeaths_tidy
VADeaths %>%
summarise(death_rate = n())
VADeaths_tidy %>%
summarise(death_rate = n())
VADeaths_tidy %>%
summarise(death_rate = n(),
lowest_rate = min(death_rate))
VADeaths_tidy %>%
summarise(death_rate = n(),
highest_rate = max(death_rate))
VADeaths_tidy %>%
summarise(n_obs = n(),
highest_rate = max(death_rate))
VADeaths_tidy %>%
summarise(n_obs = n(),
highest_death_rate = max(death_rate))
VADeaths_tidy
VADeaths_tidy %>%
group_by(gender) %>%
head()
install.packages("sourcetools")
install.packages("sf")
install.packages("tmap")
install.packages("sf")
install.packages("sf")
install.packages("tmap")
install.packages(c("DBI", "httpuv", "later", "mapview", "modelr", "processx", "psych", "rgdal", "sf", "sourcetools", "stringi", "stringr", "yaml"))
install.packages(c("callr", "dplyr", "httpuv", "processx", "Rcpp", "sf", "shiny", "stringi", "tidyr"))
install.packages(c("dplyr", "sf", "shiny", "stringi", "tidyr"))
install.packages("dplyr")
install.packages("mlbench")
library(mlbench)
data(Glass)
str(Glass)
View(Glass)
# (a) visualizations
library(tidyverse)
library(ggplot2)
Glass %>% gather() %>% head
str(Glass[-7])
str(Glass[,-7])
str(Glass[,-9])
str(Glass[,-10])
Glass[,10] %>% gather() %>% head
Glass[, -10] %>% gather() %>% head
Glass[, -10] %>% gather() %>% head
ggplot(gather(Glass[, -10]), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = "free_x")
library(corrplot)
correlations <- cor(Glass[, -10])
corrplot(correlations, order = "hclust")
correlations
ggplot(gather(Glass[, -10]), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = "free_x")
pairs(Glass[,-10])
# There seems to be an outlier for K and possibly for Fe.
library(e1071)
apply(Glass[, -10], 2, skewness)
RITrans <- BoxCoxTrans(Glass$RI)
# (c) relevant transformations
library(caret)
RITrans <- BoxCoxTrans(Glass$RI)
RITrans
RITrans
predict(RITrans, head(Glass$RI))
rmarkdown::render_site()
setwd("C:\\Users\\pistachio\\Projects\\apm")
rmarkdown::render_site()
library(mlbench)
data("Soybean")
str(Soybean)
# (a) category frequencies
count(Soybeans, "Class")
# (a) category frequencies
count(Soybean, "Class")
# (a) category frequencies
count(Soybean, "date")
# (a) category frequencies
table(Soybean$date)
sappply(Soybean, table)
sapply(Soybean, table)
# (a) category frequencies
sapply(Soybean, table)
nearZeroVar(Soybean)
?nearZeroVar
nearZeroVar(Soybean, saveMetrics = TRUE)
sapply(Soybean[,nearZeroVar(Soybean)], table)
install.packages("mice")
# (b) missing data patterns
library(mice)
md.pattern(Soybean)
# missing values seem to happen for entire categories, i.e. all leaf cols
# cols to the right have more missing values, cols are possibly ordered most of least filled out
md.pattern(Soybean) %>% names
# missing values seem to happen for entire categories, i.e. all leaf cols
# cols to the right have more missing values, cols are possibly ordered most of least filled out
md.pattern(Soybean) %>% row.names
# missing values seem to happen for entire categories, i.e. all leaf cols
# cols to the right have more missing values, cols are possibly ordered most of least filled out
md.pattern(Soybean) %>% col.names
# missing values seem to happen for entire categories, i.e. all leaf cols
# cols to the right have more missing values, cols are possibly ordered most of least filled out
md.pattern(Soybean) %>% colnames
# (c) handle missing values
soy_data <- Soybean[,-nearZeroVar(Soybean)]
head(soy_data)
preProcValues <- preProcess(soy_data, method = c("knnImpute"))
preProcessValues
preProcValues
str(soy_data)
